package org.generation.blogpessoal.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Optional;

import org.generation.blogpessoal.model.Usuario;
import org.generation.blogpessoal.repository.UsuarioRepository;
import org.generation.blogpessoal.service.UsuarioService;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

@SpringBootTest (webEnvironment = WebEnvironment.RANDOM_PORT)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
/*A anota√ß√£o @TestMethodOrder indica em qual ordem os testes ser√£o executados. A op√ß√£o MethodOrderer.OrderAnnota.class indica que os testes
  ser√£o executados na ordem indicada pela anota√ß√£o @Order inserida em cada teste.*/
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class UsuarioControllerTest {
	
	/*Foi injetado (@Autowired), um objeto da Classe UsuarioService para persistir os objetos no Banco de dados de testes com
	  a senha criptografada*/
	@Autowired
	private UsuarioService usuarioService;
	
	/*Foi injetado (@Autowired), um objeto da Classe TestRestTemplate para enviar as requisi√ß√µes para a nossa aplica√ß√£o. Somente no teste de 
	  controlller, pois usamos o padr√£o Rest que utiliza os verbos e m√©todos HTTP -> GET-POST-PUT-DELETE*/
	@Autowired
	private TestRestTemplate testRestTemplate;
	
	@Autowired
	private UsuarioRepository usuarioRepository;
	
	@BeforeAll
	void start(){

		 //Apaga todos os registros do banco de dados antes de iniciar os testes
		   usuarioRepository.deleteAll();
	}   
	
	@Test
	@Order(1)//indica que o m√©todo/teste ser√° o primeiro a ser executado.
	@DisplayName("Cadastrar apenas um usu√°rio")
	public void deveCadastrarUmUsuario() {
		
		/*Foi criado um objeto da Classe HttpEntity chamado reqquisi√ß√£o, recebendo um objeto da Classe Usu√°rio. Nesta etapa, o processo √© 
		   equivalente ao que o Postman faz em uma requisi√ß√£o do tipo POST: Transforma os atributos num objeto da Classe Usu√°rio, que ser√° 
		   enviado no corpo da requisi√ß√£o(Request Body).*/
		HttpEntity<Usuario> requisicao = new HttpEntity<Usuario>(new Usuario(0L,"Jose","jose@imperiobronze.com","trabalholindo",
				"https://i.imgur.com/FETvs2O.jpg"));
		
		/*A Requisi√ß√£o HTTP ser√° enviada atrav√©s do m√©todo exchange() da Classe
		TestRestTemplate e a Resposta da Requisi√ß√£o (Response) ser√° recebida pelo objeto
		resposta do tipo ResponseEntity. Para enviar a requisi√ß√£o, ser√° necess√°rio 4 par√¢metros:

		A URI: Endere√ßo do endpoint (/usuarios/cadastrar);
		O M√©todo HTTP: Neste exemplo o m√©todo POST;
		O Objeto HttpEntity: Neste exemplo o objeto requisi√ß√£o, que cont√©m o objeto da Classe Usuario;
		O conte√∫do esperado no Corpo da Resposta (Response Body): Neste exemplo ser√° do tipo Usuario(Usuario.class).*/
		ResponseEntity<Usuario> resposta = testRestTemplate
				.exchange("/usuarios/cadastrar", HttpMethod.POST, requisicao, Usuario.class);
		
		/*Atrav√©s do m√©todo de asser√ß√£o AssertEquals(), checaremos se a resposta
		da requisi√ß√£o (Response), √© a resposta esperada (CREATED ü°™ 201). Para obter o status
		da resposta vamos utilizar o m√©todo getStatusCode() da Classe ResponseEntity.*/
		assertEquals(HttpStatus.CREATED, resposta.getStatusCode());
		
		/*Atrav√©s do m√©todo de asser√ß√£o AssertEquals(), checaremos se o
		nome e o usu√°rio(e-mail) enviados na requisi√ß√£o foram persistidos no Banco de dados.
		Atrav√©s do m√©todo getBody() faremos o acesso aos objetos requisi√ß√£o e resposta, e
		atrav√©s dos m√©todos getNome() e getUsuario() faremos o acesso aos atributos que ser√£o
		comparados.*/
		assertEquals(requisicao.getBody().getNome(), resposta.getBody().getNome());
		assertEquals(requisicao.getBody().getUsuario(), resposta.getBody().getUsuario());
		
	}


	@Test
	@Order(2)
	@DisplayName("N√£o deve permitir duplica√ß√£o do usu√°rio")
	public void naoDeveDuplicarUsuario() {
		
		/*Atrav√©s do m√©todo cadastrarUsuario() da Classe UsuarioService, foi
		persistido um Objeto da Classe Usuario no banco de dados().*/
		usuarioService.cadastrarUsuario(new Usuario(0L, "DJ Laurinha Lero", "laurinha@lero.com", "laura123", "https://i.imgur.com/FETvs2O.jpg\r\n"));
		
		/*Foi criado um objeto HttpEntity chamado requisicao, recebendo um objeto
		da Classe Usuario contendo os mesmos dados do objeto persistido na linha 84("DJ Laurinha Lero").*/
		HttpEntity<Usuario> requisicao =  new HttpEntity<Usuario>(new Usuario(0L, "DJ Laurinha Lero", "laurinha@lero.com", "laura123", "https://i.imgur.com/FETvs2O.jpg\r\n"));
		
		ResponseEntity<Usuario> resposta = testRestTemplate
				.exchange("/usuarios/cadastrar", HttpMethod.POST, requisicao, Usuario.class);
		
		/*Atrav√©s do m√©todo de asser√ß√£o AssertEquals(), checaremos se a resposta
		da requisi√ß√£o (Response), √© a resposta esperada (BAD_REQUEST ü°™ 400). Para obter o
		status da resposta vamos utilizar o m√©todo getStatusCode() da Classe ResponseEntity.*/
		assertEquals(HttpStatus.BAD_REQUEST, resposta.getStatusCode());
	}
	
	@Test
	@Order(3)
	@DisplayName("Alterar um usu√°rio")
	public void deveAtualizarUsuario() {
		
		/*Foi criado um Objeto Optional, do tipo Usuario, chamado usuarioCreate, para armazenar o resultado da persist√™ncia de um
		  Objeto Usuario no Banco de dados, atrav√©s do m√©todo cadastrarUsuario() da Classe UsuarioService.*/
		Optional<Usuario> usuarioCreate = usuarioService.cadastrarUsuario(new Usuario(0L, "Lorena Borges", "lorena@gata.com", "jadson123", "https://i.imgur.com/FETvs2O.jpg\r\n"));
		
		/*Foi criado um Objeto do Usuario, chamado usuarioUpdate, que ser√° utilizado para atualizar
		os dados persistidos no Objeto usuarioCreate(linha 108 ).*/
		Usuario usuarioUpdate = new Usuario(usuarioCreate.get().getId(), "Lorena Borges dos Santos", "lorena_borges@gata.com", "jadson123", "https://i.imgur.com/FETvs2O.jpg\r\n");
		
		/*Foi criado um objeto da Classe HttpEntity chamado requisi√ß√£o, recebendo o objeto da Classe Usu√°rio chamado usuarioUpdate. 
		   Nesta etapa, o processo √©  equivalente ao que o Postman faz em uma requisi√ß√£o do tipo PUT: Transforma os atributos num 
		   objeto da Classe Usu√°rio, que ser√° enviado no corpo da requisi√ß√£o(Request Body).*/
		HttpEntity<Usuario> requisicao = new HttpEntity<Usuario>(usuarioUpdate);
		
		/*Mudar√° apenas esses dois par√¢metros para o envio da requisi√ß√£o
		A URI: Endere√ßo do endpoint (/usuarios/cadastrar);
		O M√©todo HTTP: Neste exemplo o m√©todo PUT;*/
		ResponseEntity<Usuario> resposta = testRestTemplate
				/*Observe que na linha 129, como o Blog Pessoal est√° com o Spring Security habilitado
				com autentica√ß√£o do tipo Http Basic, o Objeto testRestTemplate dos endpoints que
				exigem autentica√ß√£o, dever√° efetuar o login com um usu√°rio e uma senha v√°lida para
				realizar os testes. Para autenticar o usu√°rio e a senha utilizaremos o m√©todo withBasicAuth(user, password)
				da Classe TestRestTemplate. Como criamos o usu√°rio em mem√≥ria(root), na Classe BasicSecurityConfig, vamos
				us√°-lo para autenticar o nosso teste.*/
				.withBasicAuth("root", "root")
				.exchange("/usuarios/atualizar", HttpMethod.PUT, requisicao, Usuario.class);
		
			assertEquals(HttpStatus.OK, resposta.getStatusCode());
			assertEquals(usuarioUpdate.getNome(), resposta.getBody().getNome());
			assertEquals(usuarioUpdate.getUsuario(), resposta.getBody().getUsuario());
	}
	
	@Test
	@Order(4)
	@DisplayName("Listar todos os usu√°rios")
	public void deveMostrarTodosUsuarios() {
		
		/*Na linhas 144 e 147, foram persistidos dois Objetos da Classe Usuario no Banco de
		dados, atrav√©s do m√©todo cadastrarUsuario() da Classe UsuarioService.*/
		usuarioService.cadastrarUsuario(new Usuario(0L, "Jadson Viana", "jadson@lindo.com", "jadson123", 
				"https://i.imgur.com/FETvs2O.jpg\r\n"));
		
		usuarioService.cadastrarUsuario(new Usuario(0L, "Adriana Viana", "adriana@mae.com", "adriana123", 
				"https://i.imgur.com/FETvs2O.jpg\r\n"));
		
		/*Mudar√° apenas esses dois par√¢metros para o envio da requisi√ß√£o
		A URI: Endere√ßo do endpoint (/usuarios/all);
		O M√©todo HTTP: Neste exemplo o m√©todo GET;
		O Objeto HttpEntity: O objeto ser√° nulo (null). Requisi√ß√µes do tipo GET n√£o enviam Objeto no corpo da requisi√ß√£o
		O conte√∫do esperado no Corpo da Resposta (Response Body): Neste exemplo como o objeto da requisi√ß√£o √© nulo, 
		  a resposta esperada ser√° do tipo String(String.class) */
		ResponseEntity<String> resposta = testRestTemplate
				.withBasicAuth("root", "root")
				.exchange("/usuarios/all", HttpMethod.GET, null, String.class);
		
		assertEquals(HttpStatus.OK, resposta.getStatusCode());
		
	}

	@AfterAll
	public void end() {
		usuarioRepository.deleteAll();
	}
}
